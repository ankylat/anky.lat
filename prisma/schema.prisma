// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider          = "postgresql"
  url               = env("DATABASE_URL")
}


model User {
  id            Int            @id @default(autoincrement())
  username      String         @unique
  email         String         @unique
  avatarUrl     String?
  password      String
  writings      Writing[]
  comments      Comment[]
  reactions     Reaction[]
  notifications Notification[] @relation("NotificationToUser")
  triggered     Notification[] @relation("TriggeredByToUser")
}


model Question {
  id      Int       @id @default(autoincrement())
  title   String
  content String
  date    DateTime  @default(now())
  writings Writing[]
}

model Writing {
  id         Int        @id @default(autoincrement())
  content    String
  createdAt  DateTime   @default(now())
  userId     Int
  user       User       @relation(fields: [userId], references: [id])
  questionId Int
  question   Question   @relation(fields: [questionId], references: [id])
  comments   Comment[]
  reactions  Reaction[]
  notifications Notification[]
}

model Comment {
  id        Int       @id @default(autoincrement())
  content   String
  createdAt DateTime  @default(now())
  userId    Int
  user      User      @relation(fields: [userId], references: [id])
  writingId Int
  writing   Writing   @relation(fields: [writingId], references: [id])
  reactionId Int
  reactions   Reaction[]
  notifications Notification[]
}

enum ReactionType {
  LIKE
  RETWEET
  QUOTERETWEET
  // ... If there is another reaction, add it here
}

model Reaction {
  id        Int          @id @default(autoincrement())
  type      ReactionType
  createdAt DateTime     @default(now())
  userId    Int
  user      User         @relation(fields: [userId], references: [id])
  writingId Int?
  writing   Writing?     @relation(fields: [writingId], references: [id])
  commentId Int?
  comment   Comment?     @relation(fields: [commentId], references: [id])
}

enum NotificationType {
  LIKE
  RETWEET
  QUOTERETWEET
  COMMENT
  NEW_FOLLOWER
  // ... If there is another notification, add it here.
}

model Notification {
  id            Int             @id @default(autoincrement())
  type          NotificationType
  createdAt     DateTime        @default(now())
  userId        Int
  user          User            @relation("NotificationToUser", fields: [userId], references: [id])
  triggeredById Int
  triggeredBy   User            @relation("TriggeredByToUser", fields: [triggeredById], references: [id])
  writingId     Int?
  writing       Writing?        @relation(fields: [writingId], references: [id])
  commentId     Int?
  comment       Comment?        @relation(fields: [commentId], references: [id])
  seen          Boolean         @default(false)
}

